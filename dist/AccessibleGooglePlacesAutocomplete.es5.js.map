{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/AccessibleGooglePlacesAutocomplete.tsx","webpack:///external \"react\"","webpack:///external \"react-load-script\"","webpack:///external \"accessible-autocomplete/react\"","webpack:///external \"get-value\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","Script","react_1","translate","message","context","translation","addressAutoComplete","noResults","statusNoResults","statusResults","statusSelectedOption","undefined","smart_count","split","trim","replace","match","contextKey","AccessibleGooglePlacesAutocomplete","_super","props","_this","this","onAutoCompleteSelect","__awaiter","_a","_b","useMoreAccuratePostalCode","_c","onError","_d","onConfirm","selectedPrediction","predictions","find","prediction","description","getPlaceDetails","placeResult","_e","sent","hasPartialPostalCode","address_components","getReverseGeocodeData","geocodeResult","filter","component","types","includes","concat","hasPlaceSelected","placesSessionToken","google","maps","places","AutocompleteSessionToken","e_1","state","apiLoaded","currentStatusMessage","onApiLoad","getSuggestions","getNoResultsMessage","getStatusResultsMessage","getStatusSelectedOptionMessage","getStatusNoResultsMessage","__extends","setState","autocompleteService","AutocompleteService","geocoderService","Geocoder","placesService","PlacesService","document","createElement","selectedOption","option","length","contentSelectedOption","query","populateResults","googlePlacesOptions","onClear","request","__assign","input","sessionToken","getPlacePredictions","status","PlacesServiceStatus","OK","results","map","render","autoselect","googlePlacesApiKey","id","minLength","required","googlePlacesApi","encodeURIComponent","default","source","displayMenu","tNoResults","tStatusSelectedOption","tStatusNoResults","tStatusResults","url","onLoad","addressComponents","Promise","reject","resolve","getDetails","placeId","place_id","requestStatus","place","geocode","location","geometry","geocodeStatus","GeocoderStatus","bestResult","result","fieldName","reduce","isAddressMatch","isFieldMatch","Component","require"],"mappings":"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","file":"AccessibleGooglePlacesAutocomplete.es5.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","declare var google: any;\n\nimport * as React from 'react';\nimport * as Script from 'react-load-script';\nimport Autocomplete from 'accessible-autocomplete/react';\nimport * as get from 'get-value';\n\nfunction translate(message: string, context: any): string {\n  const messages = {\n    addressAutoComplete: {\n      noResults: 'Address not found',\n      statusNoResults: 'No matching addresses',\n      statusResults:\n        '%{smart_count} matching address is available |||| %{smart_count} matching addresses are available',\n      statusSelectedOption: 'You’ve selected %{option}'\n    }\n  };\n\n  let translation = get(messages, message);\n\n  if (!context) {\n    return translation;\n  }\n\n  if (!translation) {\n    return message;\n  }\n\n  // Support English plurals. More complex requirements should use an external\n  // i18n library like Polyglot.\n  if (context.smart_count !== undefined) {\n    const pluralForms = translation.split('||||');\n    const pluralIndex = context.smart_count === 1 ? 0 : 1;\n    translation = pluralForms[pluralIndex].trim();\n  }\n\n  // Interpolate results.\n  return translation.replace(\n    /%\\{(.*?)\\}/g,\n    (match: string, contextKey: string): string => {\n      if (context[contextKey] === undefined) {\n        return match;\n      }\n      if (typeof context[contextKey] === 'string') {\n        return context[contextKey].replace(/\\$/g, '$$');\n      }\n      return context[contextKey];\n    }\n  );\n}\n\ninterface IAccessibleGooglePlacesAutocompleteOptions {\n  bounds?: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral;\n  componentRestrictions?: google.maps.places.ComponentRestrictions;\n  location?: google.maps.LatLng;\n  offset?: number;\n  radius?: number;\n  types?: string[];\n}\n\ninterface IAccessibleGooglePlacesAutocompleteProps {\n  autoselect?: boolean;\n  googlePlacesApiKey: string;\n  googlePlacesOptions?: IAccessibleGooglePlacesAutocompleteOptions;\n  id: string;\n  minLength?: number;\n  onClear?: () => void;\n  onConfirm?: (placeResult: google.maps.places.PlaceResult) => void;\n  onError?: (error: any) => void;\n  required?: boolean;\n  t?: any;\n  useMoreAccuratePostalCode?: boolean;\n}\n\ninterface IAccessibleGooglePlacesAutocompleteState {\n  apiLoaded: boolean;\n}\n\nexport class AccessibleGooglePlacesAutocomplete extends React.Component<\n  IAccessibleGooglePlacesAutocompleteProps,\n  IAccessibleGooglePlacesAutocompleteState\n> {\n  private geocoderService?: google.maps.Geocoder;\n\n  private autocompleteService?: google.maps.places.AutocompleteService;\n  private placesService?: google.maps.places.PlacesService;\n\n  private placesSessionToken: google.maps.places.AutocompleteSessionToken;\n  private predictions: google.maps.places.AutocompletePrediction[];\n  private currentStatusMessage: string;\n  private hasPlaceSelected: boolean;\n\n  constructor(props: IAccessibleGooglePlacesAutocompleteProps) {\n    super(props);\n\n    this.state = {\n      apiLoaded: false\n    };\n\n    this.predictions = [];\n    this.currentStatusMessage = '';\n\n    this.onApiLoad = this.onApiLoad.bind(this);\n    this.getSuggestions = this.getSuggestions.bind(this);\n    this.getNoResultsMessage = this.getNoResultsMessage.bind(this);\n    this.getStatusResultsMessage = this.getStatusResultsMessage.bind(this);\n    this.getStatusSelectedOptionMessage = this.getStatusSelectedOptionMessage.bind(\n      this\n    );\n    this.getStatusNoResultsMessage = this.getStatusNoResultsMessage.bind(this);\n  }\n\n  public onAutoCompleteSelect = async (value: string) => {\n    const {\n      useMoreAccuratePostalCode = false,\n      onError = () => null,\n      onConfirm = () => null\n    } = this.props;\n\n    const selectedPrediction = this.predictions.find(\n      prediction => prediction.description === value\n    );\n\n    if (selectedPrediction !== undefined) {\n      try {\n        const placeResult = await this.getPlaceDetails(selectedPrediction);\n\n        if (\n          this.hasPartialPostalCode(placeResult.address_components) &&\n          useMoreAccuratePostalCode\n        ) {\n          const geocodeResult = await this.getReverseGeocodeData(placeResult);\n\n          // Remove Google Places postal code that may be a partial code.\n          placeResult.address_components = placeResult.address_components.filter(\n            component => !component.types.includes('postal_code')\n          );\n\n          // Add reverse geocode postal code value.\n          placeResult.address_components = placeResult.address_components.concat(\n            geocodeResult.address_components.filter(component =>\n              component.types.includes('postal_code')\n            )\n          );\n        }\n\n        this.hasPlaceSelected = true;\n        this.placesSessionToken = new google.maps.places.AutocompleteSessionToken();\n\n        onConfirm(placeResult);\n      } catch (e) {\n        onError(e);\n      }\n    }\n  };\n\n  public onApiLoad() {\n    this.setState(() => ({ apiLoaded: true }));\n    this.autocompleteService = new google.maps.places.AutocompleteService();\n    this.geocoderService = new google.maps.Geocoder();\n    this.placesService = new google.maps.places.PlacesService(\n      document.createElement('div')\n    );\n    this.placesSessionToken = new google.maps.places.AutocompleteSessionToken();\n  }\n\n  public getNoResultsMessage(): string {\n    const { t = translate } = this.props;\n    return t('addressAutoComplete.noResults');\n  }\n\n  public getStatusSelectedOptionMessage(selectedOption: string): string {\n    const { t = translate } = this.props;\n    return t('addressAutoComplete.statusSelectedOption', {\n      option: selectedOption\n    });\n  }\n\n  public getStatusNoResultsMessage(): string {\n    const { t = translate } = this.props;\n    const statusNoResults = t('addressAutoComplete.statusNoResults');\n\n    // don't repeat \"No matching addresses\" over and over\n    if (this.currentStatusMessage === statusNoResults) {\n      return '';\n    }\n\n    this.currentStatusMessage = statusNoResults;\n    return statusNoResults;\n  }\n\n  public getStatusResultsMessage(\n    length: number,\n    contentSelectedOption: string\n  ): string {\n    const { t = translate } = this.props;\n\n    if (contentSelectedOption) {\n      return '';\n    }\n\n    const statusResults = t('addressAutoComplete.statusResults', {\n      smart_count: length\n    });\n\n    // don't repeat \"5 matching addresses\" over and over\n    if (this.currentStatusMessage === statusResults) {\n      return '';\n    }\n\n    this.currentStatusMessage = statusResults;\n    return statusResults;\n  }\n\n  public getSuggestions(query: string, populateResults: any): void {\n    const { googlePlacesOptions = {}, onClear = () => null } = this.props;\n\n    const request: google.maps.places.AutocompletionRequest = {\n      ...googlePlacesOptions,\n      input: query,\n      sessionToken: this.placesSessionToken\n    };\n\n    const getPlaces = (\n      predictions: google.maps.places.AutocompletePrediction[],\n      status: google.maps.places.PlacesServiceStatus\n    ) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        populateResults([]);\n        return;\n      }\n\n      this.predictions = predictions;\n      const results = predictions.map(prediction => prediction.description);\n      populateResults(results);\n    };\n\n    if (this.autocompleteService) {\n      this.autocompleteService.getPlacePredictions(request, getPlaces);\n    }\n\n    if (this.hasPlaceSelected) {\n      this.hasPlaceSelected = false;\n      onClear();\n    }\n  }\n\n  public render() {\n    const {\n      autoselect = false,\n      googlePlacesApiKey,\n      id,\n      minLength = 4,\n      required = false\n    } = this.props;\n    const { apiLoaded } = this.state;\n    const encodedKey = encodeURIComponent(googlePlacesApiKey);\n    const googlePlacesApi = `https://maps.googleapis.com/maps/api/js?key=${encodedKey}&libraries=places`;\n\n    if (apiLoaded) {\n      return (\n        <Autocomplete\n          autoselect={autoselect}\n          id={id}\n          source={this.getSuggestions}\n          minLength={minLength}\n          required={required}\n          displayMenu=\"overlay\"\n          tNoResults={this.getNoResultsMessage}\n          tStatusSelectedOption={this.getStatusSelectedOptionMessage}\n          tStatusNoResults={this.getStatusNoResultsMessage}\n          tStatusResults={this.getStatusResultsMessage}\n          onConfirm={this.onAutoCompleteSelect}\n        />\n      );\n    }\n\n    return <Script url={googlePlacesApi} onLoad={this.onApiLoad} />;\n  }\n\n  private hasPartialPostalCode(\n    addressComponents: google.maps.GeocoderAddressComponent[]\n  ): boolean {\n    return (\n      addressComponents.find(component =>\n        component.types.includes('postal_code_prefix')\n      ) !== undefined\n    );\n  }\n\n  private getPlaceDetails(\n    prediction: google.maps.places.AutocompletePrediction\n  ): Promise<google.maps.places.PlaceResult> {\n    if (this.placesService === undefined) {\n      return Promise.reject('Google places service is not available.');\n    }\n\n    return new Promise((resolve, reject) => {\n      this.placesService!.getDetails(\n        {\n          placeId: prediction.place_id,\n          sessionToken: this.placesSessionToken\n        },\n        (\n          placeResult: google.maps.places.PlaceResult,\n          requestStatus: google.maps.places.PlacesServiceStatus\n        ) => {\n          if (requestStatus === google.maps.places.PlacesServiceStatus.OK) {\n            resolve(placeResult);\n          } else {\n            reject(requestStatus);\n          }\n        }\n      );\n    });\n  }\n\n  private getReverseGeocodeData(\n    place: google.maps.places.PlaceResult\n  ): Promise<google.maps.GeocoderResult> {\n    if (this.geocoderService === undefined) {\n      return Promise.reject('Google geocoding service is not available.');\n    }\n\n    return new Promise((resolve, reject) => {\n      this.geocoderService!.geocode(\n        {\n          location: place.geometry.location\n        },\n        (\n          geocodeResult: google.maps.GeocoderResult[],\n          geocodeStatus: google.maps.GeocoderStatus\n        ) => {\n          if (geocodeStatus === google.maps.GeocoderStatus.OK) {\n            // Find first reverse geocode address that matches the street\n            // number, name, and city.\n            const bestResult = geocodeResult.find(result => {\n              // Match all the required fields for the reverse geocode address\n              // and reduce field matches to a single boolean value.\n              return ['street_number', 'route', 'locality']\n                .map(fieldName => {\n                  return (\n                    place.address_components[fieldName] ===\n                    result.address_components[fieldName]\n                  );\n                })\n                .reduce((isAddressMatch, isFieldMatch) => {\n                  return isAddressMatch && isFieldMatch;\n                }, true);\n            });\n\n            resolve(bestResult === undefined ? geocodeResult[0] : bestResult);\n          } else {\n            reject(geocodeStatus);\n          }\n        }\n      );\n    });\n  }\n}\n","module.exports = require(\"react\");","module.exports = require(\"react-load-script\");","module.exports = require(\"accessible-autocomplete/react\");","module.exports = require(\"get-value\");"],"sourceRoot":""}